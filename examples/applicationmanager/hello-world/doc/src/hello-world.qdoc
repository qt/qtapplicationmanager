// Copyright (C) 2021 The Qt Company Ltd.
// Copyright (C) 2019 Luxoft Sweden AB
// Copyright (C) 2018 Pelagicore AG
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!

\example applicationmanager/hello-world
\brief Learn how to write your first System UI.
\ingroup applicationmanager-examples
\title System UI Example: "Hello World!"
\image hello-world-example.png The Hello World example with two applications running.

\note Please \l{wayland-dev-packages}{read this} if you want to build the example on a Linux machine.

\section1 Introduction

This example shows a very simple System UI implementation that showcases Qt Application Manager's
fundamental building blocks.

The applications' icons and names are on the left. You can click on their respective icons to start
and stop them. The column layout on the right shows their windows.

The applications display "Hello World!" against a background of a specific color.

\section1 Files and Folder Structure

This example comprises of four separate QML applications: a System UI and three sample
applications: "Hello Red", "Hello Green" and "Hello Blue". The System UI is also a QML application,
albeit a special one.

Each application is put in a separate directory as follows:

\list
\li \tt system-ui.qml
\li \tt{\b{apps}}
    \list
    \li \tt{\b{hello-world.blue}}
        \list
        \li \tt icon.png
        \li \tt info.yaml
        \li \tt main.qml
        \endlist
    \li \tt{\b{hello-world.red}}
        \list
        \li \tt icon.png
        \li \tt info.yaml
        \li \tt main.qml
        \endlist
    \li \tt{\b{hello-world.green}}
        \list
        \li \tt icon.png
        \li \tt info.yaml
        \li \tt main.qml
        \endlist
    \endlist
\endlist

Each application has a \c main.qml file, an icon, and an \l{Manifest Definition}{\c info.yaml}.
This YAML file contains application metadata such as the name of the application, its icon
filename, and more.

\section1 Run the System UI

The compiled hello-world binary contains a complete application manager including the
\c am-config.yaml configuration file and the System UI QML files.

The screenshot below is what you should see when running the binary:

\image hello-world-launched.png

\section1 CMake integration and ApplicationManager configuration

As said above the example binary contains the QML files and the \c am-config.yaml configuration file.
This is done by adding all those files into the executable as follows in the CMakeLists.txt file:

\quotefromfile applicationmanager/hello-world/CMakeLists.txt
\skipto qt_add_qml_module(hello-world
\printuntil )

The \c am-config.yaml file contains the configuration for the Application Manager. It specifies where
the builtin applications can be found by setting \c applications/builtinAppsManifestDir to
\c "${EXECUTABLE_DIR}/apps".
In addition the configuration file specifies the location of the main QML file by setting
\c ui/mainQml to \c "${CONFIG_DIR}/system-ui.qml".

For information on the contents of \c am-config.yaml and other command line options you can run
\tt{appman --help} or have a look at the \l{Configuration} documentation.

In addition to the System UI itself, the application packages also need to be added to our
CMakeLists.txt file. This is done by adding the following lines:

\quotefromfile applicationmanager/hello-world/CMakeLists.txt
\skipto qt6_am_create_builtin_package(hello-world.blue
\printuntil )

\section1 Implement the System UI

Like any simple QML application, our example's code starts with some imports and a plain Item at
the root. The only difference is that our System UI also imports the
\c QtApplicationManager.SystemUI module, besides \c QtQuick.

\quotefromfile applicationmanager/hello-world/system-ui.qml
\skipto import QtQuick
\printuntil height:

Next, we have a Column on the left side of the root Item where we place the icons of the available
applications along with their names.

\printto Show windows

We use the \c ApplicationManager singleton, as a model, which provides a row for each application
available. In each row, we have:

\list
    \li an \c icon role with the icon URL
    \li a \c name role with the localized application's name
    \li a boolean \c isRunning that provides the application's status
    \li an \c application role that contains its ApplicationObject
\endlist

For information on the other roles available, see \l{ApplicationManager}{ApplicationManager QML Type}.

Clicking on an icon either starts its application or stops it if it's already running.

Next, we place a \c Column anchored to the right side of the root \c Item. In this column, we lay
out the existing windows for all applications that are currently running:

\printto /^\}/

This time, we use the \c WindowManager singleton as the model. There's a row for each window, with
its WindowObject in the \c window role.

To have a window rendered in our System UI, we have to assign its WindowObject to a WindowItem,
as we did above. By default, the window is resized to match the size of the WindowItem rendering
it.

\section1 Implement the Application

Our Hello World applications display a "Hello World!" text against a colored background.

\quotefromfile applicationmanager/hello-world/apps/hello-world.blue/main.qml
\skipto import QtQuick
\printuntil /^\}/

The only difference between this example and a plain QML application is that the root element is
an ApplicationManagerWindow, provided by the \c QtApplicationManager.Application module.

\section2 Application Metadata

The \c info.yaml file contains the metadata about an application. It starts with some boilerplate
describing that this file contains Qt Application Manager package metadata.

\quotefromfile applicationmanager/hello-world/apps/hello-world.blue/info.yaml
\printuntil --

Then comes the package ID, which uniquely identifies the package. It's recommended to
follow a reverse DNS scheme, but it's not enforced. Here it's the "Blue" package from the
"Hello World" example UI.

\printline id:

Then the icon filename:

\printline icon:

Following comes the user-visible name of the package in any number of languages. For this
example, we only provide English:

\printuntil en:

After this package level metadata, any number of applications can be added. In this simple example
we define exactly one application and give it the same application id as the package.
Since the application does not have an icon or name, it will inherit the package's icon and name.

\printuntil id:

The \c code field specifies the entry point of the application. For QML applications, this means
the filename of its main QML file.

\printline code:

The \c runtime field specifies the runtime used by the application. In this example, all
applications are written in QML and hence we use the \c 'qml' runtime. Another runtime is
\c 'native' for instance, used for compiled, executable, applications where the \c code
entry would point to its binary executable filename.

\printline runtime:

*/
