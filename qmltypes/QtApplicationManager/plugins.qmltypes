import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the application manager.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// appman-dumpqmltypes

Module {
    dependencies: [ "QtQuick.Window 6.5", "QtQuick 6.5" ]
    Component {
        name: "MonitorModel"
        exports: [ "QtApplicationManager/MonitorModel 2.0" ]
        exportMetaObjectRevisions: [ 0 ]
        prototype: "QAbstractListModel"
        Property { name: "dataSources"; type: "QQmlListProperty<QObject>"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "maximumCount"; type: "int"; }
        Property { name: "interval"; type: "int"; }
        Property { name: "running"; type: "bool"; }
        Signal {
            name: "countChanged"
        }
        Signal {
            name: "intervalChanged"
        }
        Signal {
            name: "runningChanged"
        }
        Signal {
            name: "maximumCountChanged"
        }
        Signal {
            name: "dataSourcesChanged"
        }
        Method {
            name: "clear"
        }
        Method {
            name: "get"
            type: "QVariantMap"
            Parameter { name: "row"; type: "int"; }
        }
    }
    Component {
        name: "FrameTimer"
        exports: [ "QtApplicationManager/FrameTimer 2.0" ]
        exportMetaObjectRevisions: [ 0 ]
        prototype: "QObject"
        Property { name: "averageFps"; type: "double"; isReadonly: true }
        Property { name: "minimumFps"; type: "double"; isReadonly: true }
        Property { name: "maximumFps"; type: "double"; isReadonly: true }
        Property { name: "jitterFps"; type: "double"; isReadonly: true }
        Property { name: "window"; type: "QObject"; isPointer: true; }
        Property { name: "interval"; type: "int"; }
        Property { name: "running"; type: "bool"; }
        Property { name: "roleNames"; type: "QStringList"; isReadonly: true }
        Signal {
            name: "updated"
        }
        Signal {
            name: "intervalChanged"
        }
        Signal {
            name: "runningChanged"
        }
        Signal {
            name: "windowChanged"
        }
        Method {
            name: "update"
        }
    }
    Component {
        name: "IoStatus"
        exports: [ "QtApplicationManager/IoStatus 2.0" ]
        exportMetaObjectRevisions: [ 0 ]
        prototype: "QObject"
        Property { name: "deviceNames"; type: "QStringList"; }
        Property { name: "ioLoad"; type: "QVariantMap"; isReadonly: true }
        Property { name: "roleNames"; type: "QStringList"; isReadonly: true }
        Signal {
            name: "deviceNamesChanged"
        }
        Signal {
            name: "ioLoadChanged"
        }
        Method {
            name: "update"
        }
    }
    Component {
        name: "MemoryStatus"
        exports: [ "QtApplicationManager/MemoryStatus 2.0" ]
        exportMetaObjectRevisions: [ 0 ]
        prototype: "QObject"
        Property { name: "totalMemory"; type: "qulonglong"; isReadonly: true }
        Property { name: "memoryUsed"; type: "qulonglong"; isReadonly: true }
        Property { name: "roleNames"; type: "QStringList"; isReadonly: true }
        Signal {
            name: "memoryUsedChanged"
        }
        Method {
            name: "update"
        }
    }
    Component {
        name: "GpuStatus"
        exports: [ "QtApplicationManager/GpuStatus 2.0" ]
        exportMetaObjectRevisions: [ 0 ]
        prototype: "QObject"
        Property { name: "gpuLoad"; type: "double"; isReadonly: true }
        Property { name: "roleNames"; type: "QStringList"; isReadonly: true }
        Signal {
            name: "gpuLoadChanged"
        }
        Method {
            name: "update"
        }
    }
    Component {
        name: "CpuStatus"
        exports: [ "QtApplicationManager/CpuStatus 2.0" ]
        exportMetaObjectRevisions: [ 0 ]
        prototype: "QObject"
        Property { name: "cpuLoad"; type: "double"; isReadonly: true }
        Property { name: "cpuCores"; type: "int"; isReadonly: true }
        Property { name: "roleNames"; type: "QStringList"; isReadonly: true }
        Signal {
            name: "cpuLoadChanged"
        }
        Method {
            name: "update"
        }
    }
    Component {
        name: "IntentClientRequest"
        exports: [ "QtApplicationManager/IntentRequest 2.1" ]
        exportMetaObjectRevisions: [ 0 ]
        prototype: "QObject"
        isCreatable: false
        Enum { name: "Direction"; values: [ "ToSystem", "ToApplication" ] }
        Property { name: "requestId"; type: "QUuid"; isReadonly: true }
        Property { name: "direction"; type: "Direction"; isReadonly: true }
        Property { name: "intentId"; type: "string"; isReadonly: true }
        Property { name: "applicationId"; type: "string"; isReadonly: true }
        Property { name: "requestingApplicationId"; type: "string"; isReadonly: true }
        Property { name: "parameters"; type: "QVariantMap"; isReadonly: true }
        Property { name: "succeeded"; type: "bool"; isReadonly: true }
        Property { name: "errorMessage"; type: "string"; isReadonly: true }
        Property { name: "result"; type: "QVariantMap"; isReadonly: true }
        Property { name: "broadcast"; type: "bool"; isReadonly: true }
        Signal {
            name: "requestIdChanged"
        }
        Signal {
            name: "replyReceived"
        }
        Method {
            name: "sendReply"
            Parameter { name: "result"; type: "QVariantMap"; }
        }
        Method {
            name: "sendErrorReply"
            Parameter { name: "errorMessage"; type: "string"; }
        }
    }
    Component {
        name: "IntentClient"
        exports: [ "QtApplicationManager/IntentClient 2.1" ]
        exportMetaObjectRevisions: [ 0 ]
        prototype: "QObject"
        isSingleton: true
        Property { name: "systemUiId"; type: "string"; isReadonly: true }
        Method {
            name: "sendIntentRequest"
            type: "IntentClientRequest"; isPointer: true;
            Parameter { name: "intentId"; type: "string"; }
            Parameter { name: "parameters"; type: "QVariantMap"; }
        }
        Method {
            name: "sendIntentRequest"
            type: "IntentClientRequest"; isPointer: true;
            Parameter { name: "intentId"; type: "string"; }
            Parameter { name: "applicationId"; type: "string"; }
            Parameter { name: "parameters"; type: "QVariantMap"; }
        }
        Method {
            name: "broadcastIntentRequest"
            type: "bool"
            Parameter { name: "intentId"; type: "string"; }
            Parameter { name: "parameters"; type: "QVariantMap"; }
        }
    }
    Component {
        name: "Notification"
        exports: [ "QtApplicationManager/Notification 2.0" ]
        exportMetaObjectRevisions: [ 0 ]
        prototype: "QObject"
        Enum { name: "Priority"; values: [ "Low", "Normal", "Critical" ] }
        Property { name: "notificationId"; type: "uint"; isReadonly: true }
        Property { name: "visible"; type: "bool"; }
        Property { name: "summary"; type: "string"; }
        Property { name: "body"; type: "string"; }
        Property { name: "icon"; type: "QUrl"; }
        Property { name: "image"; type: "QUrl"; }
        Property { name: "category"; type: "string"; }
        Property { name: "priority"; type: "int"; }
        Property { name: "acknowledgeable"; type: "bool"; }
        Property { name: "timeout"; type: "int"; }
        Property { name: "sticky"; type: "bool"; }
        Property { name: "showProgress"; type: "bool"; }
        Property { name: "progress"; type: "double"; }
        Property { name: "actions"; type: "QVariantList"; }
        Property { name: "showActionsAsIcons"; type: "bool"; }
        Property { name: "dismissOnAction"; type: "bool"; }
        Property { name: "extended"; type: "QVariantMap"; }
        Signal {
            name: "notificationIdChanged"
            Parameter { name: "notificationId"; type: "uint"; }
        }
        Signal {
            name: "summaryChanged"
            Parameter { name: "summary"; type: "string"; }
        }
        Signal {
            name: "bodyChanged"
            Parameter { name: "body"; type: "string"; }
        }
        Signal {
            name: "iconChanged"
            Parameter { name: "icon"; type: "QUrl"; }
        }
        Signal {
            name: "imageChanged"
            Parameter { name: "image"; type: "QUrl"; }
        }
        Signal {
            name: "categoryChanged"
            Parameter { name: "category"; type: "string"; }
        }
        Signal {
            name: "priorityChanged"
            Parameter { name: "priority"; type: "int"; }
        }
        Signal {
            name: "acknowledgeableChanged"
            Parameter { name: "clickable"; type: "bool"; }
        }
        Signal {
            name: "timeoutChanged"
            Parameter { name: "timeout"; type: "int"; }
        }
        Signal {
            name: "stickyChanged"
            Parameter { name: "sticky"; type: "bool"; }
        }
        Signal {
            name: "showProgressChanged"
            Parameter { name: "showProgress"; type: "bool"; }
        }
        Signal {
            name: "progressChanged"
            Parameter { name: "progress"; type: "double"; }
        }
        Signal {
            name: "actionsChanged"
            Parameter { name: "actions"; type: "QVariantList"; }
        }
        Signal {
            name: "showActionsAsIconsChanged"
            Parameter { name: "showActionsAsIcons"; type: "bool"; }
        }
        Signal {
            name: "dismissOnActionChanged"
            Parameter { name: "dismissOnAction"; type: "bool"; }
        }
        Signal {
            name: "extendedChanged"
            Parameter { name: "extended"; type: "QVariantMap"; }
        }
        Signal {
            name: "visibleChanged"
            Parameter { name: "visible"; type: "bool"; }
        }
        Signal {
            name: "acknowledged"
        }
        Signal {
            name: "actionTriggered"
            Parameter { name: "actionId"; type: "string"; }
        }
        Method {
            name: "setSummary"
            Parameter { name: "summary"; type: "string"; }
        }
        Method {
            name: "setBody"
            Parameter { name: "boy"; type: "string"; }
        }
        Method {
            name: "setIcon"
            Parameter { name: "icon"; type: "QUrl"; }
        }
        Method {
            name: "setImage"
            Parameter { name: "image"; type: "QUrl"; }
        }
        Method {
            name: "setCategory"
            Parameter { name: "category"; type: "string"; }
        }
        Method {
            name: "setPriority"
            Parameter { name: "priority"; type: "int"; }
        }
        Method {
            name: "setAcknowledgeable"
            Parameter { name: "acknowledgeable"; type: "bool"; }
        }
        Method {
            name: "setTimeout"
            Parameter { name: "timeout"; type: "int"; }
        }
        Method {
            name: "setSticky"
            Parameter { name: "sticky"; type: "bool"; }
        }
        Method {
            name: "setShowProgress"
            Parameter { name: "showProgress"; type: "bool"; }
        }
        Method {
            name: "setProgress"
            Parameter { name: "progress"; type: "double"; }
        }
        Method {
            name: "setActions"
            Parameter { name: "actions"; type: "QVariantList"; }
        }
        Method {
            name: "setShowActionsAsIcons"
            Parameter { name: "showActionsAsIcons"; type: "bool"; }
        }
        Method {
            name: "setDismissOnAction"
            Parameter { name: "dismissOnAction"; type: "bool"; }
        }
        Method {
            name: "setExtended"
            Parameter { name: "extended"; type: "QVariantMap"; }
        }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool"; }
        }
        Method {
            name: "show"
        }
        Method {
            name: "update"
        }
        Method {
            name: "hide"
        }
    }
}
