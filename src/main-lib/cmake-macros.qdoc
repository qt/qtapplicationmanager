// Copyright (C) 2021 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
\page cmake-qt6-am-add-systemui-wrapper.html
\ingroup cmake-macros-qtapplicationmanager

\title qt_am_add_systemui_wrapper
\keyword qt6_am_add_systemui_wrapper

\brief Creates a basic wrapper script to run a System UI using the appman binary.

\preliminarycmakecommand

\section1 Synopsis

\badcode
qt_am_add_systemui_wrapper(
    target
    [EXECUTABLE appman-executable]
    [MAIN_QML_FILE main.qml]
    [CONFIG_YAML config.yaml ...]
    [EXTRA_ARGS ...]
    [EXTRA_FILES ...]
    [EXTRA_FILES_GLOB ...]
    [INSTALL_DIR install-dir]
)
\endcode

\versionlessCMakeCommandsNote qt6_am_add_systemui_wrapper()

\section1 Description

Generates a \c .bat (Windows) or \c .sh (macOS, Linux) wrapper in the build directory to easily run
your QML based System UI referenced by \c target on the desktop or within Qt Creator. It will also
automatically copy the required files from the source to the build directory: these are the \c
MAIN_QML_FILE, any \c CONFIG_YAML files as well as all \c EXTRA_FILES.

Any directory in \c EXTRA_FILES will be recursively copied. By default the file types are limited
to \c {*.qml *.js qmldir *.json *.yaml *.png *.jpg *.svg}, but you can supply a custom glob pattern
via \c EXTRA_FILES_GLOB (see CMake's \c file(GLOB) command for details).

If you also want this command to automatically generate installation rules for all files, you can
specify the destination directory via \c INSTALL_DIR. By default, no installation rule is created.

If you want to use a custom build of the application manager, you can do that by using \c
EXECUTABLE. Otherwise, the \c appman binary of the current Qt build will be used.

All \c EXTRA_ARGS will be appended to the command line when running the \c EXECUTABLE from the
wrapper script.

For very simple setups, specifying just the \c MAIN_QML_FILE is enough. If you already have an \c
am-config.yaml, you can reference that via \c CONFIG_YAML. In case your main.qml is already set in
the YAML config file, you do not need to specify it here again.

\warning Please note that this command will not scale when your project is becoming more
sophisticated over time. It is only meant to help you get started without diving too deep into
CMake.

\section1 Examples

Here is a snippet from the \l applicationmanager/minidesk example, showing how this function is
used there:

\quotefromfile applicationmanager/minidesk/CMakeLists.txt

\skipto qt6_am_add_systemui_wrapper
\printuntil /^\)/

*/

/*!
\page cmake-qt6_am_create_installable_package.html
\ingroup cmake-macros-qtapplicationmanager

\title qt_am_create_installable_package
\keyword qt6_am_create_installable_package

\brief Uses the appman-packager tool to package applications.

\preliminarycmakecommand

\section1 Synopsis

\badcode
qt_am_create_installable_package(
    target
    SOURCE_DIR <dir>
    OUTPUT_PACKAGE <package.ampkg>
)
\endcode

\versionlessCMakeCommandsNote qt6_am_create_installable_package()

\section1 Description

Adds a custom \c target that, when executed, uses the \l{Packager}{appman-packager} tool to create
a package for the application found in \c SOURCE_DIR. The result is written to \c OUTPUT_PACKAGE.

The complete content of the source directory is packaged, which works out of the box for QML-only
applications, but needs installation rules to temporary directories for more sophisticated setups
(e.g. QML plugins).

The \c info.yaml manifest from \c SOURCE_DIR is added as source file to the \c target.

\note This function will serve as an anchor for the application manager's QtCreator integration
      to discover the available packages in a System UI.

\section1 Examples

Here is a snippet from the \l applicationmanager/package-installation example, showing how this
function is used there:

\quotefromfile applicationmanager/package-installation/CMakeLists.txt
\skipto foreach
\printuntil endforeach

*/

/*!
\page cmake-qt6_am_create_builtin_package.html
\ingroup cmake-macros-qtapplicationmanager

\title qt_am_create_builtin_package
\keyword qt6_am_create_builtin_package

\brief Marks a directory containing a package as built-in.

\preliminarycmakecommand

\section1 Synopsis

\badcode
qt6_am_create_builtin_package(
    target
    SOURCE_DIR <dir>
)
\endcode

\versionlessCMakeCommandsNote qt6_am_create_builtin_package()

\section1 Description

Adds a custom \c target, containing the \c info.yaml manifest from \c SOURCE_DIR as source file.

This is a dummy function that works exactly like \l qt_am_create_installable_package, but for
built-in packages.

\note This function will serve as an anchor for the application manager's QtCreator integration
      to discover the available packages in a System UI.

*/
